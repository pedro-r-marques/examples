---
- name: Wait for Jenkins to start up before proceeding.
  shell: "curl -u admin:{{ jenkins_passwd }} -D - --silent http://localhost:8080/cli/"
  register: result
  until: (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: 10
  delay: 10
  changed_when: false

- set_fact:
    aws_access_key_id: "{{ lookup('env', 'AWS_ACCESS_KEY_ID' }}"
  when: aws_access_key_id is not defined

- set_fact:
    aws_secret_access_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY' }}"
  when: aws_secret_access_key is not defined

- name: Setup AWS credentials
  command: curl -u "admin:{{ jenkins_passwd }}" --data-urlencode "script={{ aws_credentials_script | replace('\"', '\\\"') }}" http://localhost:8080/scriptText
  register: aws_credentials_cmd

- assert:
    that:
      - aws_credentials_cmd.stdout == ""

- name: Store SSH private key
  template: src=rsa.j2 dest="{{ k8s_key_file }}"

- command: echo "{{ k8s_key_file }}"
  register: k8s_key_file_abspath

- name: Setup SSH private key
  command: curl -u "admin:{{ jenkins_passwd }}" --data-urlencode "script={{ ssh_credentials_script | replace('\"', '\\\"') }}" http://localhost:8080/scriptText
  register: ssh_credentials_cmd

- assert:
    that:
      - ssh_credentials_cmd.stdout == ""

- name: Setup Github token
  command: curl -u "admin:{{ jenkins_passwd }}" --data-urlencode "script={{ github_credentials_script | replace('\"', '\\\"') }}" http://localhost:8080/scriptText
  register: github_credentials_cmd

- assert:
    that:
      - github_credentials_cmd.stdout == ""

