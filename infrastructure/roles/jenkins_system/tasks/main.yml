---
- name: Wait for Jenkins to start up before proceeding.
  shell: "curl -u admin:{{ jenkins_passwd }} -D - --silent http://localhost:8080/cli/"
  register: result
  until: (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: 10
  delay: 10
  changed_when: false

- name: jenkins cli
  get_url:
    url: http://localhost:8080/jnlpJars/jenkins-cli.jar
    dest: "{{ jenkins_jar_location }}"
    url_username: admin
    url_password: "{{ jenkins_passwd }}"

- set_fact:
    security_script: >-
      import hudson.security.*;
      import jenkins.model.*;
      instance = Jenkins.getInstance();
      realm = new HudsonPrivateSecurityRealm(false);
      instance.setSecurityRealm(realm);
      realm.createAccount(\"admin\", \"{{ jenkins_passwd }}\");
      strategy = new GlobalMatrixAuthorizationStrategy();
      strategy.add(Jenkins.ADMINISTER, \"admin\");
      instance.setAuthorizationStrategy(strategy);
      instance.save();

- name: Setup authorization and authentication
  command: curl -u "admin:{{ jenkins_passwd }}" --data-urlencode "script={{ security_script }}" http://localhost:8080/scriptText
  register: script

- assert:
    that:
      - script.stdout == ""

- name: login
  command: java -jar "{{ jenkins_jar_location }}" -s http://localhost:8080 login --username admin --password "{{ jenkins_passwd }}"

- name: plugins
  include: plugins.yml
